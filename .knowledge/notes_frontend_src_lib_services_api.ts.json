{"is_source_file": true, "format": "TypeScript", "description": "This file provides API service functions for a notes management frontend, including authentication and CRUD operations for notes, utilizing fetch with token management.", "external_files": ["$lib/stores/auth"], "external_methods": ["auth.subscribe"], "published": ["apiFetch", "login", "signup", "getNotes", "getNote", "createNote", "updateNote", "deleteNote", "Note"], "classes": [], "methods": [{"name": "function buildHeaders(extra: HeadersInit = {}): HeadersInit { buildHeaders", "description": "Constructs request headers, including Authorization if a token exists.", "scope": "", "scopeKind": ""}, {"name": "export async function apiFetch<T = unknown>(path: string, options: RequestInit = {}): Promise<T>/ apiFetch", "description": "Performs a fetch request with JSON handling, including error management.", "scope": "", "scopeKind": ""}, {"name": "export async function login(email: string, password: string): Promise<{ token: string; user: { i/ login", "description": "Authenticates a user with email and password, retrieving a token and user info.", "scope": "", "scopeKind": ""}, {"name": "export async function signup(email: string, password: string): Promise<{ token: string; user: { / signup", "description": "Registers a new user with email and password, returning token and user info.", "scope": "", "scopeKind": ""}, {"name": "export async function getNotes(query: string = ''): Promise<Array<Note>> { getNotes", "description": "Retrieves a list of notes, with optional search query.", "scope": "", "scopeKind": ""}, {"name": "export async function getNote(id: string): Promise<Note> { getNote", "description": "Fetches a single note by its ID.", "scope": "", "scopeKind": ""}, {"name": "export async function createNote(payload: Partial<Note>): Promise<Note> { createNote", "description": "Creates a new note with provided payload.", "scope": "", "scopeKind": ""}, {"name": "export async function updateNote(id: string, payload: Partial<Note>): Promise<Note> { updateNote", "description": "Updates an existing note identified by ID with new payload.", "scope": "", "scopeKind": ""}, {"name": "export async function deleteNote(id: string): Promise<{ success: boolean }> { deleteNote", "description": "Deletes a note by ID.", "scope": "", "scopeKind": ""}], "calls": ["fetch", "auth.subscribe", "res.headers.get", "res.json", "res.text"], "search-terms": ["apiFetch", "Notes API", "auth", "Note", "fetch wrapper", "svelte auth store"], "state": 2, "file_id": 14, "knowledge_revision": 30, "git_revision": "", "ctags": [{"_type": "tag", "name": "API_BASE", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-12410-12419/notes_frontend/src/lib/services/api.ts", "pattern": "/^const API_BASE = (import.meta.env.VITE_API_BASE as string) || '\\/api';$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "Note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-12410-12419/notes_frontend/src/lib/services/api.ts", "pattern": "/^export type Note = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "apiFetch", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-12410-12419/notes_frontend/src/lib/services/api.ts", "pattern": "/^export async function apiFetch<T = unknown>(path: string, options: RequestInit = {}): Promise<T>/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "buildHeaders", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-12410-12419/notes_frontend/src/lib/services/api.ts", "pattern": "/^function buildHeaders(extra: HeadersInit = {}): HeadersInit {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "contentType", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-12410-12419/notes_frontend/src/lib/services/api.ts", "pattern": "/^  const contentType = res.headers.get('content-type') || '';$/", "language": "TypeScript", "kind": "constant", "scope": "apiFetch", "scopeKind": "function"}, {"_type": "tag", "name": "createNote", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-12410-12419/notes_frontend/src/lib/services/api.ts", "pattern": "/^export async function createNote(payload: Partial<Note>): Promise<Note> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "deleteNote", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-12410-12419/notes_frontend/src/lib/services/api.ts", "pattern": "/^export async function deleteNote(id: string): Promise<{ success: boolean }> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "getNote", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-12410-12419/notes_frontend/src/lib/services/api.ts", "pattern": "/^export async function getNote(id: string): Promise<Note> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "getNotes", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-12410-12419/notes_frontend/src/lib/services/api.ts", "pattern": "/^export async function getNotes(query: string = ''): Promise<Array<Note>> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "headers", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-12410-12419/notes_frontend/src/lib/services/api.ts", "pattern": "/^  const headers: HeadersInit = {$/", "language": "TypeScript", "kind": "constant", "scope": "buildHeaders", "scopeKind": "function"}, {"_type": "tag", "name": "login", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-12410-12419/notes_frontend/src/lib/services/api.ts", "pattern": "/^export async function login(email: string, password: string): Promise<{ token: string; user: { i/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "q", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-12410-12419/notes_frontend/src/lib/services/api.ts", "pattern": "/^  const q = query ? `?q=${encodeURIComponent(query)}` : '';$/", "language": "TypeScript", "kind": "constant", "scope": "getNotes", "scopeKind": "function"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-12410-12419/notes_frontend/src/lib/services/api.ts", "pattern": "/^  const res = await fetch(`${API_BASE}${path}`, {$/", "language": "TypeScript", "kind": "constant", "scope": "apiFetch", "scopeKind": "function"}, {"_type": "tag", "name": "signup", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-12410-12419/notes_frontend/src/lib/services/api.ts", "pattern": "/^export async function signup(email: string, password: string): Promise<{ token: string; user: { /", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "text", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-12410-12419/notes_frontend/src/lib/services/api.ts", "pattern": "/^    const text = await res.text().catch(() => '');$/", "language": "TypeScript", "kind": "constant", "scope": "apiFetch", "scopeKind": "function"}, {"_type": "tag", "name": "unsubscribe", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-12410-12419/notes_frontend/src/lib/services/api.ts", "pattern": "/^  const unsubscribe = auth.subscribe((a) => (token = a.token));$/", "language": "TypeScript", "kind": "constant", "scope": "buildHeaders", "scopeKind": "function"}, {"_type": "tag", "name": "updateNote", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-12410-12419/notes_frontend/src/lib/services/api.ts", "pattern": "/^export async function updateNote(id: string, payload: Partial<Note>): Promise<Note> {$/", "language": "TypeScript", "kind": "function"}], "hash": "11c2679e2d2310611a6a57f0c8fb6c0c", "format-version": 4, "code-base-name": "notes_frontend", "filename": "notes_frontend/src/lib/services/api.ts", "revision_history": [{"30": ""}]}